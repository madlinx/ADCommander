unit fmFloatingWindow;

interface

uses
  System.Classes, Vcl.Forms, Winapi.Windows, System.SysUtils, Winapi.Messages,
  Vcl.Graphics, Vcl.StdCtrls, Vcl.Controls, Vcl.ExtCtrls, Vcl.Dialogs,
  Variants, Vcl.ComCtrls, Vcl.Imaging.jpeg, System.ImageList, Vcl.ImgList,
  Winapi.CommCtrl, Winapi.ActiveX, ADCmdUCMA_TLB, ADC.UCMAEvents, ComObj,
  ADC.ADObject, ADC.Common, ADC.ImgProcessor, ADC.UserEdit, ADC.GlobalVar,
  ADC.Types;

const
  WM_FWND_THREAD = WM_USER + 1;

  STATUS_IMAGE_UNKNOWN        = 0;
  STATUS_IMAGE_ONLINE         = 1;
  STATUS_IMAGE_IDLE           = 2;
  STATUS_IMAGE_BUSY           = 3;
  STATUS_IMAGE_DO_NOT_DISTURB = 4;

type
  PContactInfo = ^TContactInfo;
  TContactInfo = record
    Handle: THandle;
    DistingushedName: string;
    Contact: IUCMAContact;
    DisplayName: WideString;
    Activity: WideString;
    PersonalNote: WideString;
    ImageBytes: TImgByteArray;
  end;

type
  TForm_FloatingWindow = class(TForm)
    PaintBox_Background: TPaintBox;
    Image_Status: TImage;
    Image_Contact: TImage;
    Label_Name: TLabel;
    Label_Status: TLabel;
    Label_Info: TLabel;
    ImageList_Status: TImageList;
    ImageList_Contact: TImageList;
    Timer_Display: TTimer;
    procedure PaintBox_BackgroundPaint(Sender: TObject);
    procedure Timer_DisplayTimer(Sender: TObject);
  strict private
    const FFormPadding = 9;
    const TIMER_MODE_DISPLAY_DELAY    = 0;
    const TIMER_MODE_DISPLAY_DURATION = 1;
  protected
    procedure WndProc(var Message: TMessage); override;
    procedure VisibleChanging; override;
  private
    FOwner: TForm;
    FListView: TListView;
    FObj: TADObject;
    FContact: IUCMAContact;
    FEventSink: TUCMAEventSink;
    FClientSignedIn: Boolean;
    FDisplayActivity: Boolean;
    FDisplayDelay: Integer;
    FDisplayDuration: Integer;
    FJPEG_Default: TJPEGImage;
    FDefaultHeight: Integer;
    FSA: SECURITY_ATTRIBUTES;
    FThreads: array of THandle;
    FDataArray: array of PContactInfo;
    procedure AlignControls;
    procedure SetPosition;
    procedure SetDisplayDelay(AValue: Integer);
    procedure CreateUCMAClient;
    procedure SignInUCMAClient;
    procedure SetContactImage(AImage: PSafeArray); overload;
    procedure SetContactImage(AImage: TImgByteArray); overload;
    function ContactIdleTimeToString(AIdleStartTime: TDateTime): string;
    procedure OnClientSignIn(Sender: TObject);
    procedure OnClientSignOut(Sender: TObject);
    procedure OnClientDisconnected(Sender: TObject);
    procedure OnSettingChanged(Sender: TObject);
    procedure OnContactInformationChanged(Sender: TObject);
    procedure OnUriChanged(Sender: TObject; oldURI, newURI: WideString);
  public
    { Public declarations }
    constructor Create(AOwner: TComponent; ListView: TListView = nil); overload;
    destructor Destroy;
    procedure Show(AUser: TADObject); overload;
    procedure Hide(Clear: Boolean); overload;
    procedure Reset;
    property DisplayDelay: Integer read FDisplayDelay write SetDisplayDelay;
    property DisplayDuration: Integer read FDisplayDuration write FDisplayDuration;
    property DisplayActivity: Boolean read FDisplayActivity write FDisplayActivity;
  end;

var
  Form_FloatingWindow: TForm_FloatingWindow;

  FThreadID1: DWORD;
  FThreadID_GetContactUCMAInfo: DWORD;
  FThreadID_GetAvailabilityImageIndex: DWORD;
  FThreadID_GetContactActiveDirectoryInfo: DWORD;

implementation

{$R *.dfm}

{ В отдельном потоке вытягиваем информацию пользователя из Active Directory }
procedure GetContactActiveDirectoryInfo(lpParam: LPVOID); stdcall;
var
  c: PContactInfo absolute lpParam;
  u: TUserEdit;
begin
  try
    case apAPI of
      ADC_API_LDAP: u.GetInfo(LDAPBinding, c^.DistingushedName);
      ADC_API_ADSI: u.GetInfoDS(ADSIBinding, c^.DistingushedName);
    end;
  except

  end;

  c^.DisplayName := u.displayName;
  c^.Activity := u.title;
  c^.PersonalNote := u.physicalDeliveryOfficeName;
  c^.ImageBytes := u.thumbnailPhoto;

  if GetCurrentThreadID = FThreadID_GetContactActiveDirectoryInfo then
  begin
    PostMessage(c^.Handle, WM_FWND_THREAD, 0, GetCurrentThreadID);
  end;

  c := nil;
end;

{ В отдельном потоке вытягиваем информацию пользователя из UCMA }
procedure GetContactUCMAInfo(lpParam: LPVOID); stdcall;
var
  c: PContactInfo absolute lpParam;
  bytes: PSafeArray;
  LBound, HBound : Integer;
  i: Integer;
  ib: Byte;
begin
  try
    c^.DisplayName := c^.Contact.DisplayName;
    c^.Activity := c^.Contact.Activity;
    c^.PersonalNote := c^.Contact.PersonalNote;

    bytes := c^.Contact.Photo;
    SafeArrayGetLBound(bytes, 1, LBound);
    SafeArrayGetUBound(bytes, 1, HBound);
    SetLength(c^.ImageBytes, HBound + 1);
    for i := LBound to HBound do
    begin
      SafeArrayGetElement(bytes, i, ib);
      c^.ImageBytes[i] := ib;
    end;
    SafeArrayDestroy(bytes);

    if GetCurrentThreadID = FThreadID_GetContactUCMAInfo then
    begin
      PostMessage(c^.Handle, WM_FWND_THREAD, 0, GetCurrentThreadID);
    end;
  except

  end;
end;

{ В отдельном потоке определяем изображение индикатора присутствия }
procedure GetContactAvailabilityImageIndex(lpParam: LPVOID); stdcall;
var
  c: PContactInfo absolute lpParam;
  res: Integer;
begin
  try
    case c^.Contact.Availability of
      0            : res := STATUS_IMAGE_UNKNOWN;
      1..4999      : res := STATUS_IMAGE_ONLINE;
      5000..6499   : res := STATUS_IMAGE_IDLE;
      6500..7499   : res := STATUS_IMAGE_BUSY;
      7500..9499   : res := STATUS_IMAGE_BUSY;
      9500..12499  : res := STATUS_IMAGE_DO_NOT_DISTURB;
      12500..15499 : res := STATUS_IMAGE_IDLE;
      15500..18499 : res := STATUS_IMAGE_IDLE;
      else raise Exception.Create('Availability unknown');
    end;
  except
    res := STATUS_IMAGE_UNKNOWN;
  end;

  if GetCurrentThreadID = FThreadID_GetAvailabilityImageIndex then
  begin
    PostMessage(c^.Handle, WM_FWND_THREAD, res, GetCurrentThreadID);
  end;

end;

{ TForm_FloatingWindow }

function TForm_FloatingWindow.ContactIdleTimeToString(
  AIdleStartTime: TDateTime): string;
begin
  Result := 'sdsdsdsdsads'
end;

constructor TForm_FloatingWindow.Create(AOwner: TComponent; ListView: TListView);
var
  TmpBMP: TBitmap;
  i: Integer;
begin
  if not (AOwner is TForm) then
    raise Exception.Create('Owner should be TForm');

  inherited Create(AOwner);

  FormStyle := fsStayOnTop;
  BorderStyle := bsNone;
  TransparentColorValue := clPurple;
  Color := TransparentColorValue;
  TransparentColor := True;
  Position := poDesigned;
  Width := 320;
  FOwner := TForm(AOwner);

  SetLength(FThreads, 3);

  SetLength(FDataArray, Length(FThreads));
  for i := Low(FDataArray) to High(FDataArray) do
    New(FDataArray[i]);

  CreateUCMAClient;
  SignInUCMAClient;

  FListView := ListView;
  FDisplayDelay := 500;
  FDisplayDuration := 3000;

  with FSA do
  begin
    nLength := SizeOf(SECURITY_ATTRIBUTES);
    bInheritHandle := True;
    lpSecurityDescriptor := nil;
  end;

  FJPEG_Default := TJPEGImage.Create;
  with FJPEG_Default do
  begin
    CompressionQuality := 100;
    Smoothing := True;
    TmpBMP := TBitmap.Create;
    try
      ImageList_Contact.GetBitmap(1, TmpBMP);
      Assign(TmpBMP);
    finally
      TmpBMP.Free;
    end;
  end;

  AlignControls;

  FDefaultHeight := Image_Contact.Top * 2 + Image_Contact.Height;
  Height := FDefaultHeight;
  Reset;
end;

procedure TForm_FloatingWindow.CreateUCMAClient;
begin
  try
    FContact := CreateComObject(CLASS_UCMAContact) as IUCMAContact;
    FEventSink := TUCMAEventSink.Create;
    FEventSink.Connect(FContact);
    FEventSink.OnClientSignIn := OnClientSignIn;
    FEventSink.OnClientSignOut := OnClientSignOut;
    FEventSink.OnClientDisconnected := OnClientDisconnected;
    FEventSink.OnContactInformationChanged := OnContactInformationChanged;
//    FEventSink.OnSettingChanged := OnSettingChanged;
//    FEventSink.OnUriChanged := OnUriChanged;

    FClientSignedIn := FContact.ClientSignIn;
  except
    FContact := nil;
  end;
end;

destructor TForm_FloatingWindow.Destroy;
var
  i: Integer;
begin
  FJPEG_Default.Free;
  FEventSink.Disconnect;
  FContact.FreeContact;

  for i := Low(FDataArray) to High(FDataArray) do
    Dispose(FDataArray[i]);

  inherited Destroy;
end;

procedure TForm_FloatingWindow.PaintBox_BackgroundPaint(Sender: TObject);
const
  RoundValue: Integer = 3;
var
  ImgRect: TRect;
  i: Integer;
begin
  with Sender as TPaintBox do
  begin
    Canvas.Brush.Color := TransparentColorValue;
    Canvas.FillRect(BoundsRect);

    Canvas.Pen.Color := clSilver;
    Canvas.Brush.Color := clWindow;

    Canvas.RoundRect(
      ClientRect.TopLeft.X,
      ClientRect.TopLeft.Y,
      ClientRect.BottomRight.X,
      ClientRect.BottomRight.Y,
      RoundValue,
      RoundValue
    );

    Canvas.Pen.Color := clGray;
    ImgRect := Image_Contact.ClientRect;
    ImgRect.Offset(Image_Contact.Left, Image_Contact.Top);

    Canvas.Rectangle(
      ImgRect.TopLeft.X - 1,
      ImgRect.TopLeft.Y - 1,
      ImgRect.BottomRight.X + 1,
      ImgRect.BottomRight.Y + 1
    );
  end;

  AlignControls;
end;

procedure TForm_FloatingWindow.Hide(Clear: Boolean);
begin
  if Clear then Self.FObj := nil;

  TForm(Self).Hide;
  Reset;
end;

procedure TForm_FloatingWindow.OnClientDisconnected(Sender: TObject);
begin
  FClientSignedIn := False;
end;

procedure TForm_FloatingWindow.OnClientSignIn(Sender: TObject);
begin
  FClientSignedIn := True;
end;

procedure TForm_FloatingWindow.OnClientSignOut(Sender: TObject);
begin
  FClientSignedIn := False;
end;

procedure TForm_FloatingWindow.OnContactInformationChanged(Sender: TObject);
var
  s: string;
begin
  FThreads[1] := CreateThread(
    @FSA,
    0,
    @GetContactAvailabilityImageIndex,
    FDataArray[2],
    0,
    FThreadID_GetAvailabilityImageIndex
  );

  FThreads[2] := CreateThread(
    @FSA,
    0,
    @GetContactUCMAInfo,
    FDataArray[2],
    0,
    FThreadID_GetContactUCMAInfo
  );
end;

procedure TForm_FloatingWindow.OnSettingChanged(Sender: TObject);
begin

end;

procedure TForm_FloatingWindow.OnUriChanged(Sender: TObject; oldURI,
  newURI: WideString);
begin

end;

procedure TForm_FloatingWindow.Reset;
var
  i: Integer;
begin
  for i := Low(FThreads) to High(FThreads) do
  try
    if FThreads[i] <> 0 then
    begin
      TerminateThread(FThreads[i], 0);
      CloseHandle(FThreads[i]);
    end;
    FThreads[i] := 0;
  except

  end;

  Timer_Display.Enabled := False;
  Timer_Display.Tag := TIMER_MODE_DISPLAY_DELAY;
  Timer_Display.Interval := FDisplayDelay;
  try FContact.FreeContact; except end;
  Image_Status.Picture := nil;
  ImageList_Status.GetBitmap(0, Image_Status.Picture.Bitmap);
  Label_Name.Caption := '';
  if DisplayActivity
    then Label_Status.Caption := ''
    else Label_Status.Caption := '';
  Label_Info.Caption := '';
end;

procedure TForm_FloatingWindow.SetPosition;
var
  Rightmost, Bottommost: Integer;
  R: TRect;
  P: TPoint;
  li : TLIstItem;
  lvHitInfo: TLVHitTestInfo;
begin
  if (FOwner.WindowState = wsMaximized) and (FListView <> nil) then
  begin
    Rightmost := FListView.ClientToScreen(Point(FListView.ClientWidth, 0)).X;
    Bottommost := FListView.ClientToScreen(Point(0, FListView.ClientHeight)).Y;
  end else
  begin
    Rightmost := Screen.DesktopWidth;
    Bottommost := Screen.WorkAreaHeight;
  end;

  if Mouse.CursorPos.X > Rightmost - Width - 16
    then Left := Rightmost - Width
    else Left := Mouse.CursorPos.X + 16;

  if Mouse.CursorPos.Y > Bottommost - Height - 16
    then Top := Mouse.CursorPos.Y - Height - 16
    else Top := Mouse.CursorPos.Y + 16;
end;

procedure TForm_FloatingWindow.SetContactImage(AImage: TImgByteArray);
var
  srcB: TBitmap;
  resB: TBitmap;
  R: TRect;
begin
  srcB := TBitmap.Create;
  try
    try
      if Length(AImage) = 0
        then raise Exception.Create('No contact image');

      TImgProcessor.ByteArrayToImage(AImage, srcB);
    except;
      srcB.Assign(FJPEG_Default);
    end;

    if (srcB.Width > Image_Contact.Width) or (srcB.Height > Image_Contact.Height) then
    begin
      resB := TBitmap.Create;
      try
        { Вписывание изображения по ширине/высоте }
        if srcB.Height > srcB.Width then
        begin
          resB.Width := Image_Contact.ClientWidth;
          resB.Height := (resB.Width * srcB.Height) div srcB.Width;
          R := resB.Canvas.ClipRect;
          R.Inflate(0, -Abs(resB.Height - resB.Width) div 2);
          R.Offset(0, -Abs(resB.Height - resB.Width) div 4);
        end else
        begin
          resB.Height := Image_Contact.ClientHeight;
          resB.Width := (resB.Height * srcB.Width) div srcB.Height;
          R := resB.Canvas.ClipRect;
          R.Inflate(-Abs(resB.Width - resB.Height) div 2, 0);
        end;

        TImgProcessor.SmoothResize(srcB, resB);
        Image_Contact.Canvas.CopyMode := cmSrcCopy;
        Image_Contact.Canvas.CopyRect(
           Image_Contact.Canvas.ClipRect,
           resB.Canvas,
           R
        );

        { Изменение размера с сохранением пропорций }
//        if srcB.Width > srcB.Height then
//        begin
//          resB.Width := Image_Contact.ClientWidth;
//          resB.Height := (resB.Width * srcB.Height) div srcB.Width;
//        end else
//        begin
//          resB.Height := Image_Contact.ClientHeight;
//          resB.Width := (resB.Height * srcB.Width) div srcB.Height;
//        end;
//        TImgProcessor.SmoothResize(srcB, resB);
//        Image_Contact.Picture.Bitmap.Assign(resB);
      finally
        resB.Free;
      end;
    end else Image_Contact.Picture.Bitmap.Assign(srcB);
  finally
    srcB.Free;
  end;
end;

procedure TForm_FloatingWindow.SetContactImage(AImage: PSafeArray);
var
  LBound: Integer;
  HBound: Integer;
  ImgBytes: TImgByteArray;
  i: Integer;
  ib: Byte;
begin
  SafeArrayGetLBound(AImage, 1, LBound);
  SafeArrayGetUBound(AImage, 1, HBound);
  SetLength(ImgBytes, HBound + 1);
  for i := LBound to HBound do
  begin
    SafeArrayGetElement(AImage, i, ib);
    ImgBytes[i] := ib;
  end;
  SafeArrayDestroy(AImage);

  SetContactImage(ImgBytes);
end;

procedure TForm_FloatingWindow.SetDisplayDelay(AValue: Integer);
var
  TimerState: Boolean;
begin
  if AValue < 1
    then FDisplayDelay := 1
    else FDisplayDelay := AValue;

  TimerState := Timer_Display.Enabled;
  Timer_Display.Enabled := False;
  Timer_Display.Interval := FDisplayDelay;
  Timer_Display.Enabled := TimerState;
end;

procedure TForm_FloatingWindow.Show(AUser: TADObject);
begin
  if (AUser = nil) or not (AUser.IsUser) then
  begin
    Self.Hide(True);
    Exit;
  end;

  SetPosition;

  if FObj <> AUser then
  begin
    { Если задержка отображения небольшая, то скрывать окно нет смысла. }
    { Поэтому просто сбрасываем его состояние.                          }
    if FDisplayDelay > 99 then Hide(False) else Reset;

    ZeroMemory(FDataArray[1], SizeOf(TContactInfo));
    FObj := AUser;
    FDataArray[1]^.Handle := Self.Handle;
    FDataArray[1]^.DistingushedName := FObj.distinguishedName;

    FThreads[0] := CreateThread(
      @FSA,
      0,
      @GetContactActiveDirectoryInfo,
      FDataArray[1],
      0,
      FThreadID_GetContactActiveDirectoryInfo
    );

    if FDisplayActivity then
    try
      if FContact = nil then CreateUCMAClient;
      if not FClientSignedIn then SignInUCMAClient;
      FContact.SetContact(FObj.distinguishedName);

      FDataArray[2]^ := FDataArray[1]^;
      FDataArray[2]^.Contact := FContact;
      OnContactInformationChanged(FEventSink);
    except

    end;

    Timer_Display.Tag := TIMER_MODE_DISPLAY_DELAY;
    Timer_Display.Enabled := True;
  end;
end;

procedure TForm_FloatingWindow.SignInUCMAClient;
begin
  if FContact <> nil
    then FClientSignedIn := FContact.ClientSignIn;
end;

procedure TForm_FloatingWindow.Timer_DisplayTimer(Sender: TObject);
var
  t: TTimer absolute Sender;
  i: Integer;
begin
  if Sender is TTimer then
  case t.Tag of
    TIMER_MODE_DISPLAY_DELAY: begin
      PaintBox_BackgroundPaint(PaintBox_Background);

      for i := 0 to Self.ControlCount - 1 do
        Self.Controls[i].Refresh;

      ShowWindow(Self.Handle, SW_SHOWNOACTIVATE);
      { Выставляем Visible := True, т.к. если не выставить, то не будет работать метод Hide }
      Self.Visible := True;
      t.Enabled := False;
      t.Tag := TIMER_MODE_DISPLAY_DURATION;
      t.Interval := FDisplayDuration;
      t.Enabled := FDisplayDuration > 0;
    end;

    TIMER_MODE_DISPLAY_DURATION: begin
      Self.Hide(False);
    end;
  end;
end;

procedure TForm_FloatingWindow.VisibleChanging;
begin
  inherited;
  case Visible of
    True: begin
      { Если окно отображается и будет скрыто }

    end;

    False: begin
      { Если окно скрыто и будет отображено   }

    end;
  end;

end;

procedure TForm_FloatingWindow.WndProc(var Message: TMessage);
var
  s: string;
begin
  inherited;
  case Message.Msg of
    WM_FWND_THREAD: begin
      if Message.LParam = FThreadID_GetContactActiveDirectoryInfo then
      begin
        Label_Name.Caption := FDataArray[1]^.DisplayName;
        if not FDisplayActivity
          then Label_Status.Caption := FDataArray[1]^.Activity;
        Label_Info.Caption := FDataArray[1]^.PersonalNote;
        SetContactImage(FDataArray[1]^.ImageBytes);
      end else

      if Message.LParam = FThreadID_GetContactUCMAInfo then
      begin
        s := FDataArray[2]^.DisplayName;
        if not s.IsEmpty
          then Label_Name.Caption := s;

        s := FDataArray[2]^.Activity;
        if not s.IsEmpty
          then Label_Status.Caption := s;

        s := FDataArray[2]^.PersonalNote;
        if not s.IsEmpty
          then Label_Info.Caption := s;

        SetContactImage(FDataArray[2]^.ImageBytes);
      end;

      if Message.LParam = FThreadID_GetAvailabilityImageIndex then
      begin
        ImageList_Status.GetBitmap(Message.WParam, Image_Status.Picture.Bitmap);
        Image_Status.Refresh;
      end;
    end;
  end;
end;

procedure TForm_FloatingWindow.AlignControls;
var
 dy: Integer;
begin
  Image_Status.Left := FFormPadding;
  Image_Status.Visible := FDisplayActivity;
  Image_Status.Top := FFormPadding;

  if FDisplayActivity
    then Image_Contact.Left := Image_Status.Left + Image_Status.Width
    else Image_Contact.Left := FFormPadding + 1;
  Image_Contact.Top := Image_Status.Top + 1;

  Label_Name.Left := Image_Contact.Left + Image_Contact.Width + 8;
  Label_Name.Top := Image_Contact.Top - 1;
  Label_Name.Width := ClientWidth - Label_Name.Left - FFormPadding;

  Label_Status.Left := Label_Name.Left;
  Label_Status.Top := Label_Name.Top + Label_Name.Height + 4;
  Label_Status.Width := Label_Name.Width;

  Label_Info.Left := Label_Name.Left;
  Label_Info.Top := Label_Status.Top + Label_Status.Height + 4;
  Label_Info.Width := Label_Name.Width;
end;

end.
